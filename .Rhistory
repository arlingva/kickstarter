qqline(df[df$state == "canceled","duracion"])
qqnorm(df[df$state == "failed","failed"], main = "C")
qqnorm(df[df$state == "live","live"], main = "C")
qqnorm(df[df$state == "successful","successful"], main = "successful")
qqnorm(df[df$state == "suspended","suspended"], main = "suspended")
qqnorm(df[df$state == "undefined","undefined"], main = "undefined")
qqnorm(df[df$state == "canceled","duracion"], main = "C")
qqline(df[df$state == "canceled","duracion"])
qqnorm(df[df$state == "failed","duracion"], main = "C")
qqline(df[df$state == "failed","duracion"])
par(mfrow = c(3,2))
qqnorm(df[df$state == "canceled","duracion"], main = "C")
qqline(df[df$state == "canceled","duracion"])
qqnorm(df[df$state == "failed","duracion"], main = "C")
qqline(df[df$state == "failed","duracion"])
qqnorm(df[df$state == "live","duracion"], main = "C")
qqline(df[df$state == "live","duracion"])
qqnorm(df[df$state == "successful","duracion"], main = "successful")
qqline(df[df$state == "successful","duracion"])
qqnorm(df[df$state == "suspended","duracion"], main = "suspended")
qqline(df[df$state == "suspended","duracion"])
qqnorm(df[df$state == "undefined","duracion"], main = "undefined")
qqline(df[df$state == "undefined","duracion"])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle("Histograma con curva normal teórica") +
theme_bw()
estados <- unique(df$state)
estados
par(mfrow = c(3,2))
for(i in 1:length(estados)){
df1 <- df %>%
filter(state == estados[i]) %>%
ggplot(aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle("Histograma con curva normal teórica") +
theme_bw()
}
i <-1
df1 <- df %>%
filter(state == estados[i]) %>%
ggplot(aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle("Histograma con curva normal teórica") +
theme_bw()
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle("Histograma con curva normal teórica") +
theme_bw()
estados <- unique(df$state)
par(mfrow = c(3,2))
for(i in 1:length(estados)){
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica; ", estados[i])) +
theme_bw()
}
qqnorm(df$duracion, pch = 19, col = "gray50")
qqline(df1$duracion)
estados <- unique(df$state)
par(mfrow = c(3,2))
for(i in 1:length(estados)){
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica; ", estados[i])) +
theme_bw()
}
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica; ", estados[i])) +
theme_bw()
par(mfrow = c(3,2))
for(i in 1:length(estados)){
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica; ", estados[i])) +
theme_bw()
}
length(estados)
i<-1
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica; ", estados[i])) +
theme_bw()
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica; ", estados[i]))
estados <- unique(df$state)
estados <- unique(df$state)
par(mfrow = c(3,2))
for(i in 1:length(estados)){
df1 <- df %>%
filter(state == estados[i])
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estados[i])) +
theme_bw()
}
estados[i]
df1 <- df %>%
filter(state == estados[i]) %>%
ggplot(aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estados[i])) +
theme_bw()
df1 <- df %>%
filter(state == estados[i]) %>%
ggplot(aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estados[i])) +
theme_bw()
par(mfrow = c(3,2))
estado <- "canceled"
df1 <- df %>%
filter(state == estado)
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
estado <- "failed"
df1 <- df %>%
filter(state == estado)
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
estado <- "live"
df1 <- df %>%
filter(state == estado)
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
estado <- "successful"
df1 <- df %>%
filter(state == estado)
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
estado <- "suspended"
df1 <- df %>%
filter(state == estado)
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
estado <- "undefined"
df1 <- df %>%
filter(state == estado)
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
table(df$duracionGrupo, df$state) %>%
chisq.test()
tabla(df$duracionGrupo, df$state)
tabla(df$duracionGrupo, df$state)
df
df$state
df
tabla(df$duracionGrupo, df$state)
source("funcionesKickstarter.R")
crosstab(df$duracionGrupo, df$state)
crosstab(df$duracionGrupo, df$state, Freq = FALSE)
crosstab(df$duracionGrupo, df$state, Freq = TRUE)
help(table
)
a <- letters[1:3]
a
table(a, sample(a))                    # dnn is c("a", "")
table(a, sample(a), deparse.level = 0) # dnn is c("", "")
table(a, sample(a), deparse.level = 2) # dnn is c("a", "sample(a)")
a <- rep(c(NA, 1/0:3), 10)
a
table(a)                 # does not report NA's
table(a, exclude = NULL) # reports NA's
b <- factor(rep(c("A","B","C"), 10))
b
ggplot(data = df1, aes(x = duracion)) +
geom_histogram(aes(y = ..density.., fill = ..count..)) +
scale_fill_gradient(low = "#DCDCDC", high = "#7C7C7C") +
stat_function(fun = dnorm, colour = "firebrick",
args = list(mean = mean(df1$duracion),
sd = sd(df1$duracion))) +
ggtitle(paste("Histograma con curva normal teórica: ", estado)) +
theme_bw()
tabla(df$duracion)
df %>%
desc(duracion)
df %>%
desc()
df %>%
head()
df %>%
arrange() %>%
head()
df %>%
desc() %>%
head()
df[with(df, order(-df$duracion)), ]
df[with(df, order(-df$duracion)), ] %>%
group_by(duracion) %>%
select(duracion) %>%
tally() %>%
tabla(df$duracion)
df[with(df, order(-df$duracion)), ] %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
with(order(-df$duracion))
df %>%
select(duracion)
df %>%
select(duracion) %>%
group_by(duracion)
df %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
with(order(df$duracion))
df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
desc(n)
df %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df.duracion[with(df, order(-df.duracion$n))]
df.duracion
df.duracion$n
order(-df.duracion$n)
[with(df, order(-df.duracion$n))]
df.duracion[with(df, order(-df.duracion$n))]
df.duracion[with(df, order(-df.duracion$n)), ]
df[with(df, order(-df$duracion)), ] %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
order(-df)
df[with(df, order(-df$duracion)), ]
df[with(df, order(-df$duracion)), ] %>%
select(duracion)
df[with(df, order(-df$duracion)), ] %>%
select(duracion) %>%
group_by(duracion)
df[with(df, order(-df$duracion)), ] %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df[with(df, order(-df$duracion)), ] %>%
select(duracion) %>%
group_by(duracion) %>%
summarise(n = count()) %>%
order(-df)
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
order(-df)
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
order(-n,)
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
order(-df$n,)
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df.duracion[with(df, order(-df.duracion$n)), ]
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally() %>%
mutate(Porcentaje = n/sum(n), Acumulado = cumsum(n) / sum(n))
df.duracion[with(df, order(-df.duracion$n)), ]
df.duracion <- df %>%
select(duracion) %>%
group_by(duracion) %>%
tally()
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = n/sum(n), Acumulado = cumsum(n) / sum(n))
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = n/sum(n),
Acumulado = round(100*cumsum(n) / sum(n)),2)
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = n/sum(n),
Acumulado = round(100*cumsum(n) / sum(n),2))
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = n/sum(n),
Acumulado = round(100*cumsum(n) / sum(n),1))
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = 100*n/sum(n),
Acumulado = round(100*cumsum(n) / sum(n),1))
tabla(df.duracion)
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = 100*n/sum(n),
Acumulado = round(100*cumsum(n) / sum(n),1))
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = round(100*n/sum(n),1),
Acumulado = round(100*cumsum(n) / sum(n),1))
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = round(100*n/sum(n),1),
Acumulado = round(100*cumsum(n) / sum(n),1))
df.duracion[with(df, order(-df.duracion$n)), ] %>%
mutate(Porcentaje = round(100*n/sum(n),1),
Acumulado = round(100*cumsum(n) / sum(n),1)) %>%
head()
df <- df %>%
arrange(duracion) %>%
mutate(duracionGrupo = case_when(
duracion <= 7 ~ "0 a 7 días",
duracion <= 22 ~ "08 a 22 días",
duracion <= 37 ~ "23 a 37 días",
duracion <= 52 ~ "38 a 52 días",
duracion <= 67 ~ "53 a 67 días",
#TRUE ~ "68 días o más"))
duracion <= 82 ~ "68 a 82 días",
duracion <= 93 ~ "83 a 92 días",
TRUE ~ "Más de 92 días"))
table(df$duracionGrupo, df$state) %>%
chisq.test()
length(df[1])
length(df[,1])
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(magrittr)
df1 <- read_excel("HCV Reporte cuestionario 1.xlsx", sheet = 1, na = "#NULL!")
`%notin%` = function(x,y) !(x %in% y)
nuevo.df1 <- read_excel("BASE C1.xlsx", na = "#NULL!") %>%
filter(resultId %notin% df1$resultId) %>%
select(incompleteResultLabel,	resultId,	device,	Q1,	Encuestador = Q2,	Zona=Q3,
Q4,	Q4.1.1,	Q5,	Q5.1.1,	Q6,	Q6.1.1,	Q7,	Q7.1.1,	Género = Q8,	Q8.AnsweredAt,
Q170,	Q171,	Q172,	Q179,	Q179.1,	Q180,	Q180.1,	Q181,	Q181.1,	Q182,	Q182.1,
Q183,	Q183.1,	Q184,	Q184.1,	Q185,	Q185.AnsweredAt, Q186, Q187)
nuevo.df1 <- nuevo.df1 %>%
mutate(Q184.1 = as.numeric(Q184.1),
Q184.1 = if_else(Q184.1 == -99, 43, Q184.1),
suma = Q179.1 + Q180.1 + Q181.1 + Q182.1 + Q183.1 + Q184.1)
nuevo.df1 <- nuevo.df1 %>%
mutate(
NSE = case_when(
suma <= 47 ~ "E",
suma <= 89 ~ "D",
suma <= 111 ~ "D+",
suma <= 135 ~ "C-",
suma <= 165 ~ "C",
suma <= 204 ~ "C+",
suma <= 1000 ~ "AB",
),
edad = case_when(
Q172 <= 17 ~ "Menor de edad",
Q172 <= 24 ~ "18 a 24",
Q172 <= 34 ~ "25 a 34",
Q172 <= 44 ~ "35 a 44",
Q172 <= 54 ~ "45 a 54",
Q172 <= 99 ~ "55 o más"
),
sección = c()
)
write.csv(nuevo.df1, "nuevos c1.csv")
`%notin%` = function(x,y) !(x %in% y)
nuevo.df1 <- read_excel("BASE C1.xlsx", na = "#NULL!") %>%
filter(resultId %notin% df1$resultId) %>%
select(incompleteResultLabel,	resultId,	device,	Q1,	Encuestador = Q2,	Zona=Q3,
Q4,	Q4.1.1,	Q5,	Q5.1.1,	Q6,	Q6.1.1,	Q7,	Q7.1.1,	Género = Q8,	Q8.AnsweredAt,
Q170,	Q171,	Q172,	Q179,	Q179.1,	Q180,	Q180.1,	Q181,	Q181.1,	Q182,	Q182.1,
Q183,	Q183.1,	Q184,	Q184.1,	Q185,	Q185.AnsweredAt, Q186, Q187)
df2 <- read_excel("HCV Reporte cuestionario 2.xlsx", sheet = 1, na = "#NULL!")
`%notin%` = function(x,y) !(x %in% y)
nuevo.df2 <- read_excel("BASE C2.xlsx", na = "#NULL!") %>%
filter(resultId %notin% df2$resultId) %>%
select(incompleteResultLabel,	resultId,	device,	Q1,	Encuestador = Q2,	Zona=Q3,
Q4,	Q4.1.1,	Q5,	Q5.1.1,	Q6,	Q6.1.1,	Q7,	Q7.1.1,	Género = Q8,	Q8.AnsweredAt,
Q109,	Q110,	Q111,	Q118,	Q118.1,	Q119,	Q119.1,	Q120,	Q120.1,	Q121,	Q121.1,
Q122,	Q122.1,	Q123,	Q123.1,	Q124,	Q124.AnsweredAt,	Q125,	Q126)
nuevo.df2 <- nuevo.df2 %>%
mutate(Q123.1 = as.numeric(Q123.1),
Q123.1 = if_else(Q123.1 == -99, 43, Q123.1),
suma = Q118.1 + Q119.1 + Q120.1 + Q121.1 + Q122.1 + Q123.1)
nuevo.df2 <- nuevo.df2 %>%
mutate(
NSE = case_when(
suma <= 47 ~ "E",
suma <= 89 ~ "D",
suma <= 111 ~ "D+",
suma <= 135 ~ "C-",
suma <= 165 ~ "C",
suma <= 204 ~ "C+",
suma <= 1000 ~ "AB",
),
edad = case_when(
Q111 <= 17 ~ "Menor de edad",
Q111 <= 24 ~ "18 a 24",
Q111 <= 34 ~ "25 a 34",
Q111 <= 44 ~ "35 a 44",
Q111 <= 54 ~ "45 a 54",
Q111 <= 99 ~ "55 o más"
)
)
write.csv(nuevo.df2, "nuevos c2.csv")
